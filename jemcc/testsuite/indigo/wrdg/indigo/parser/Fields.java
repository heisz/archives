// Indigo VM testsuite for testing field information parsing failures.
// Copyright (C) 1999-2004 J.M. Heisz 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// See the file named COPYRIGHT in the root directory of the source
// distribution for specific references to the GNU General Public License,
// as well as further clarification on your rights to use this software.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

package wrdg.indigo.parser;

/**
 * <P>
 * Indigo test program to test the parsing of improper class field
 * information.
 * </P>
 *
 * <P>Copyright (&#169;) 1999-2004 J.M. Heisz</P>
 *
 * <P>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.</P>
 *
 * @author J.M. Heisz
 * @version $Revision: 1.3 $ $Date: 2004/01/05 12:42:13 $
 */

public class Fields extends ClassLoader {
    /* This the proper class from which the tests are derived */
    private static int[] fldBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x12, 0x00, 0x13, 0x00, 0x00, 
        0x00, 0x02, 0x00, 0x01, 0x00, 0x14, 0x00, 0x15, 
        0x00, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1d,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 
        0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x06, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00,
        0x18, 0x00, 0x15, 0x00, 0x01, 0x00, 0x16, 0x00,
        0x00, 0x00, 0x34, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x04, 0xb3, 0x00, 0x02, 0x14,
        0x00, 0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3,
        0x00, 0x07, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x1a
    };

    /* INTERNAL - classparser[16] */
    /* Truncated field data */
    private static int[] truncFldOneBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, /* ERROR - truncated in field count */
    };

    /* INTERNAL - classparser[17] */
    /* Truncated field data */
    private static int[] truncFldTwoBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00 /* ERROR - field access fields truncated */
    };

    /* INTERNAL - classparser[17] */
    /* Truncated field data */
    private static int[] truncFldThreeBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x09, 0x00 /* ERROR - truncated name index */
    };

    /* INTERNAL - classparser[17] */
    /* Truncated field data */
    private static int[] truncFldFourBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x12, 0x00 /* ERROR - truncated desc index */
    };

    /* INTERNAL - classparser[45] */
    /* Invalid field name index */
    private static int[] invalidFldNameBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x04, /* ERROR - bad name index */
                            0x00, 0x13, 0x00, 0x00, 
        0x00, 0x02, 0x00, 0x01, 0x00, 0x14, 0x00, 0x15, 
        0x00, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1d,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 
        0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x06, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00,
        0x18, 0x00, 0x15, 0x00, 0x01, 0x00, 0x16, 0x00,
        0x00, 0x00, 0x34, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x04, 0xb3, 0x00, 0x02, 0x14,
        0x00, 0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3,
        0x00, 0x07, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x1a
    };

    /* INTERNAL - classparser[46] */
    /* Invalid field descriptor index */
    private static int[] invalidFldDescBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x03, /* ERROR - bad desc idx */
                                            0x00, 0x00, 
            0x00, 0x09, 0x00, 0x12, 0x00, 0x13, 0x00, 0x00, 
        0x00, 0x02, 0x00, 0x01, 0x00, 0x14, 0x00, 0x15, 
        0x00, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1d,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 
        0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x06, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00,
        0x18, 0x00, 0x15, 0x00, 0x01, 0x00, 0x16, 0x00,
        0x00, 0x00, 0x34, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x04, 0xb3, 0x00, 0x02, 0x14,
        0x00, 0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3,
        0x00, 0x07, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x1a
    };

    /* INTERNAL - classparser[18] */
    /* Truncated after field data */
    private static int[] truncPostFldBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x12, 0x00, 0x13, 0x00, 0x00, 
        /* ERROR - end of the line */
    };

    /* INTERNAL - classparser[42] */
    /* Public, private, protected field */
    private static int[] pppFldBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x07, /* ERROR - public, private, protected */
                    0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x12, 0x00, 0x13, 0x00, 0x00, 
        0x00, 0x02, 0x00, 0x01, 0x00, 0x14, 0x00, 0x15, 
        0x00, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1d,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 
        0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x06, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00,
        0x18, 0x00, 0x15, 0x00, 0x01, 0x00, 0x16, 0x00,
        0x00, 0x00, 0x34, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x04, 0xb3, 0x00, 0x02, 0x14,
        0x00, 0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3,
        0x00, 0x07, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x1a
    };

    /* INTERNAL - classparser[43] */
    /* Final, volatile field */
    private static int[] finVolFldBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x00, 0x21, 0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x51, /* ERROR - final, volatile, public field */
                    0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x09, 0x00, 0x12, 0x00, 0x13, 0x00, 0x00, 
        0x00, 0x02, 0x00, 0x01, 0x00, 0x14, 0x00, 0x15, 
        0x00, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1d,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 
        0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x06, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00,
        0x18, 0x00, 0x15, 0x00, 0x01, 0x00, 0x16, 0x00,
        0x00, 0x00, 0x34, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x04, 0xb3, 0x00, 0x02, 0x14,
        0x00, 0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3,
        0x00, 0x07, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x1a
    };

    /* INTERNAL - classparser[44] */
    /* Invalid interface field modifiers */
    private static int[] invIfFldBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x21, 0x0a, 0x00, 0x09, 0x00, 0x1b, 0x09,
        0x00, 0x08, 0x00, 0x1c, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x09, 0x00, 0x08,
        0x00, 0x1d, 0x04, 0x40, 0xc3, 0xd7, 0x0a, 0x09,
        0x00, 0x08, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x06, 0x69, 0x6e, 0x74,
        0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x06, 0x73, 0x74, 0x72, 0x46, 0x6c, 0x64,
        0x01, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
        0x72, 0x69, 0x6e, 0x67, 0x3b, 0x01, 0x00, 0x07,
        0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x6c, 0x64, 0x01,
        0x00, 0x01, 0x4a, 0x01, 0x00, 0x06, 0x64, 0x62,
        0x6c, 0x46, 0x6c, 0x64, 0x01, 0x00, 0x01, 0x44,
        0x01, 0x00, 0x06, 0x66, 0x6c, 0x74, 0x46, 0x6c,
        0x64, 0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08,
        0x66, 0x6c, 0x64, 0x2e, 0x6a, 0x61, 0x76, 0x61,
        0x0c, 0x00, 0x14, 0x00, 0x15, 0x0c, 0x00, 0x0a,
        0x00, 0x0b, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x0c,
        0x00, 0x12, 0x00, 0x13, 0x01, 0x00, 0x03, 0x66,
        0x6c, 0x64, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 
        0x06, 0x01, /* CHANGE - now an interface */
            0x00, 0x08, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x05, /* Five fields */
            0x00, 0x19, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 
            0x00, 0x19, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x00, 
            0x00, 0x19, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 
            0x00, 0x01, /* ERROR - invalid interface field type */
                     0x00, 0x10, 0x00, 0x11, 0x00, 0x00, 
            0x00, 0x19, 0x00, 0x12, 0x00, 0x13, 0x00, 0x00, 
        0x00, 0x02, 0x00, 0x01, 0x00, 0x14, 0x00, 0x15, 
        0x00, 0x01, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1d,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 
        0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 
        0x01, 0x00, 0x17, 0x00, 0x00, 0x00, 0x06, 0x00, 
        0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00,
        0x18, 0x00, 0x15, 0x00, 0x01, 0x00, 0x16, 0x00,
        0x00, 0x00, 0x34, 0x00, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x04, 0xb3, 0x00, 0x02, 0x14,
        0x00, 0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3,
        0x00, 0x07, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x17, 0x00, 0x00, 0x00, 0x12, 0x00, 0x04, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00,
        0x0a, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x1a
    };

    /**
     * Locally run through the test cases.
     */
    public static void main(String argv[]) {
        /* Use an instance of myself for testing */
        Fields tstInstance = new Fields();

        /* Truncated field information */
        try {
            tstInstance.localDefineClass("fld", truncFldOneBytes);
            throw new Error("ERROR: Truncated field count parsed");
        } catch (ClassFormatError ex) {}

        /* Truncated field information */
        try {
            tstInstance.localDefineClass("fld", truncFldTwoBytes);
            throw new Error("ERROR: Truncated field access parsed");
        } catch (ClassFormatError ex) {}

        /* Truncated field information */
        try {
            tstInstance.localDefineClass("fld", truncFldThreeBytes);
            throw new Error("ERROR: Truncated name index parsed");
        } catch (ClassFormatError ex) {}

        /* Truncated field information */
        try {
            tstInstance.localDefineClass("fld", truncFldFourBytes);
            throw new Error("ERROR: Truncated descriptor index parsed");
        } catch (ClassFormatError ex) {}

        /* Invalid field name index */
        try {
            tstInstance.localDefineClass("fld", invalidFldNameBytes);
            throw new Error("ERROR: Invalid field name index parsed");
        } catch (ClassFormatError ex) {}

        /* Invalid field descriptor index */
        try {
            tstInstance.localDefineClass("fld", invalidFldDescBytes);
            throw new Error("ERROR: Invalid field desc index parsed");
        } catch (ClassFormatError ex) {}

        /* Data truncated at end of field data */
        try {
            tstInstance.localDefineClass("fld", truncPostFldBytes);
            throw new Error("ERROR: Post field truncation parsed");
        } catch (ClassFormatError ex) {}

        /* Public, private, protected field */
        try {
            tstInstance.localDefineClass("fld", pppFldBytes);
            throw new Error("ERROR: Pub/priv/prot field parsed");
        } catch (ClassFormatError ex) {}

        /* Final volatile field */
        try {
            tstInstance.localDefineClass("fld", finVolFldBytes);
            throw new Error("ERROR: Final volatile field parsed");
        } catch (ClassFormatError ex) {}

        /* Invalid interface field */
        try {
            tstInstance.localDefineClass("fld", invIfFldBytes);
            throw new Error("ERROR: Invalid interface field parsed");
        } catch (ClassFormatError ex) {}

        /* After all the failures, it should be usable */
        tstInstance.localDefineClass("fld", fldBytes);
    }

    /**
     * Local method to wrap class definition with integer byte arrays.
     */
    public void localDefineClass(String className, int[] byteData) {
        byte[] dataSet = new byte[2048];

        for (int i = 0; i < byteData.length; i++) {
            dataSet[i] = (byte) byteData[i];
        }
        defineClass(className, dataSet, 0, byteData.length);
    }

    /**
     * Method to provide support for JDK1.1 compilers.
     */
    public Class loadClass(String className, boolean resolve)
            throws ClassNotFoundException {
        return Class.forName(className);
    }
}
