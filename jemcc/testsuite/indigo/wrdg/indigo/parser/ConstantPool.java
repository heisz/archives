// Indigo VM testsuite for testing constant pool parsing failures.
// Copyright (C) 1999-2004 J.M. Heisz 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// See the file named COPYRIGHT in the root directory of the source
// distribution for specific references to the GNU General Public License,
// as well as further clarification on your rights to use this software.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

package wrdg.indigo.parser;

/**
 * <P>
 * Indigo test program to test the parsing of invalid class constant 
 * pool information.
 * </P>
 *
 * <P>Copyright (&#169;) 1999-2004 J.M. Heisz</P>
 *
 * <P>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.</P>
 *
 * @author J.M. Heisz
 * @version $Revision: 1.3 $ $Date: 2004/01/05 12:42:13 $
 */

public class ConstantPool extends ClassLoader {
    /* This is the correct class from which some test cases are derived */
    private static int[] properClassBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x2a, 
            0x0a, 0x00, 0x0e, 0x00, 0x20, /* methodref */
            0x09, 0x00, 0x0d, 0x00, 0x21, /* fieldref */
            0x05, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15, /* long */
            0x09, 0x00, 0x0d, 0x00, 0x22, /* fieldref */
            0x04, 0x3f, 0x99, 0x99, 0x9a, /* float */
            0x09, 0x00, 0x0d, 0x00, 0x23, /* fieldref */
            0x06, 0x40, 0xc8, 0x1c, 0xd6, 0xe6, 0x3c, 0x53, 0xd7, /* double */
            0x09, 0x00, 0x0d, 0x00, 0x24, /* fieldref */
            0x08, 0x00, 0x25, /* string */
            0x09, 0x00, 0x0d, 0x00, 0x26, /* fieldref */
            0x07, 0x00, 0x27, /* class */
            0x07, 0x00, 0x28, /* class */
            0x01, 0x00, 0x01, 0x69, /* "i" */
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x01, 0x6c, /* "l" */
            0x01, 0x00, 0x01, 0x4a, /* "J" */
            0x01, 0x00, 0x01, 0x66, /* "f" */
            0x01, 0x00, 0x01, 0x46, /* "F" */
            0x01, 0x00, 0x01, 0x64, /* "d" */
            0x01, 0x00, 0x01, 0x44, /* "D" */
            0x01, 0x00, 0x01, 0x73, /* "s" */
            0x01, 0x00, 0x12, /* "Ljava/lang/String;" */
                0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 
                0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 
                0x67, 0x3b,
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x08, /* "<clinit>" */
                0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x0c, 0x00, 0x0f, 0x00, 0x10, /* nameandtype */
            0x0c, 0x00, 0x11, 0x00, 0x12, /* nameandtype */
            0x0c, 0x00, 0x13, 0x00, 0x14, /* nameandtype */
            0x0c, 0x00, 0x15, 0x00, 0x16, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 
            0x0c, 0x00, 0x17, 0x00, 0x18, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x03, 0x00, 0x01, 0x02, 0x03, /* integer */
        /* Remainder */ 
        0x00, 0x21, 0x00, 0x0d, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x09, 0x00,
        0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x11, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x13, 0x00, 0x14, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x15, 0x00, 0x16, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x17, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x1a, 0x00, 0x01, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00,
        0x01, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c,
        0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x1a,
        0x00, 0x01, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x49,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d,
        0x11, 0x7d, 0x6d, 0xb3, 0x00, 0x02, 0x14, 0x00,
        0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3, 0x00,
        0x07, 0x14, 0x00, 0x08, 0xb3, 0x00, 0x0a, 0x12,
        0x0b, 0xb3, 0x00, 0x0c, 0xb1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00,
        0x03, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x11, 0x00,
        0x05, 0x00, 0x17, 0x00, 0x06, 0x00, 0x1c, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x1f
    };

    /* INTERNAL - classparser[7] */
    /* Only single constant pool entry */
    private static int[] onePoolEntryBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x01, 
            0x07, 0x00, 0x27, /* class */
        /* Remainder */ 
        0x00, 0x21, 0x00, 0x0d, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x09, 0x00,
        0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x11, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x13, 0x00, 0x14, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x15, 0x00, 0x16, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x17, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x1a, 0x00, 0x01, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00,
        0x01, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c,
        0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x1a,
        0x00, 0x01, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x49,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d,
        0x11, 0x7d, 0x6d, 0xb3, 0x00, 0x02, 0x14, 0x00,
        0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3, 0x00,
        0x07, 0x14, 0x00, 0x08, 0xb3, 0x00, 0x0a, 0x12,
        0x0b, 0xb3, 0x00, 0x0c, 0xb1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00,
        0x03, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x11, 0x00,
        0x05, 0x00, 0x17, 0x00, 0x06, 0x00, 0x1c, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x1f
    };

    /* INTERNAL - classparser[6] */
    /* Invalid constant pool type, outside of enumerated range */
    private static int[] badPoolTypeOutsideBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x2a, 
            0x0a, 0x00, 0x0e, 0x00, 0x20, /* methodref */
            0x09, 0x00, 0x0d, 0x00, 0x21, /* fieldref */
            0x05, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15, /* long */
            0x09, 0x00, 0x0d, 0x00, 0x22, /* fieldref */
            0x04, 0x3f, 0x99, 0x99, 0x9a, /* float */
            0x55, 0x00, 0x0d, 0x00, 0x23, /* ERROR - really large type */
            0x06, 0x40, 0xc8, 0x1c, 0xd6, 0xe6, 0x3c, 0x53, 0xd7, /* double */
            0x09, 0x00, 0x0d, 0x00, 0x24, /* fieldref */
            0x08, 0x00, 0x25, /* string */
            0x09, 0x00, 0x0d, 0x00, 0x26, /* fieldref */
            0x07, 0x00, 0x27, /* class */
            0x07, 0x00, 0x28, /* class */
            0x01, 0x00, 0x01, 0x69, /* "i" */
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x01, 0x6c, /* "l" */
            0x01, 0x00, 0x01, 0x4a, /* "J" */
            0x01, 0x00, 0x01, 0x66, /* "f" */
            0x01, 0x00, 0x01, 0x46, /* "F" */
            0x01, 0x00, 0x01, 0x64, /* "d" */
            0x01, 0x00, 0x01, 0x44, /* "D" */
            0x01, 0x00, 0x01, 0x73, /* "s" */
            0x01, 0x00, 0x12, /* "Ljava/lang/String;" */
                0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 
                0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 
                0x67, 0x3b,
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x08, /* "<clinit>" */
                0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x0c, 0x00, 0x0f, 0x00, 0x10, /* nameandtype */
            0x0c, 0x00, 0x11, 0x00, 0x12, /* nameandtype */
            0x0c, 0x00, 0x13, 0x00, 0x14, /* nameandtype */
            0x0c, 0x00, 0x15, 0x00, 0x16, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 
            0x0c, 0x00, 0x17, 0x00, 0x18, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x03, 0x00, 0x01, 0x02, 0x03, /* integer */
        /* Remainder */ 
        0x00, 0x21, 0x00, 0x0d, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x09, 0x00,
        0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x11, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x13, 0x00, 0x14, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x15, 0x00, 0x16, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x17, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x1a, 0x00, 0x01, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00,
        0x01, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c,
        0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x1a,
        0x00, 0x01, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x49,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d,
        0x11, 0x7d, 0x6d, 0xb3, 0x00, 0x02, 0x14, 0x00,
        0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3, 0x00,
        0x07, 0x14, 0x00, 0x08, 0xb3, 0x00, 0x0a, 0x12,
        0x0b, 0xb3, 0x00, 0x0c, 0xb1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00,
        0x03, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x11, 0x00,
        0x05, 0x00, 0x17, 0x00, 0x06, 0x00, 0x1c, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x1f
    };

    /* INTERNAL - classparser[11] */
    /* Invalid constant pool type within enumerated range */
    private static int[] badPoolTypeInsideBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x2a, 
            0x0a, 0x00, 0x0e, 0x00, 0x20, /* methodref */
            0x09, 0x00, 0x0d, 0x00, 0x21, /* fieldref */
            0x05, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15, /* long */
            0x09, 0x00, 0x0d, 0x00, 0x22, /* fieldref */
            0x04, 0x3f, 0x99, 0x99, 0x9a, /* float */
            0x09, 0x00, 0x0d, 0x00, 0x23, /* fieldref */
            0x06, 0x40, 0xc8, 0x1c, 0xd6, 0xe6, 0x3c, 0x53, 0xd7, /* double */
            0x09, 0x00, 0x0d, 0x00, 0x24, /* fieldref */
            0x08, 0x00, 0x25, /* string */
            0x09, 0x00, 0x0d, 0x00, 0x26, /* fieldref */
            0x07, 0x00, 0x27, /* class */
            0x07, 0x00, 0x28, /* class */
            0x01, 0x00, 0x01, 0x69, /* "i" */
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x01, 0x6c, /* "l" */
            0x02, 0x00, 0x01, 0x4a, /* ERROR - invalid type 2 */
            0x01, 0x00, 0x01, 0x66, /* "f" */
            0x01, 0x00, 0x01, 0x46, /* "F" */
            0x01, 0x00, 0x01, 0x64, /* "d" */
            0x01, 0x00, 0x01, 0x44, /* "D" */
            0x01, 0x00, 0x01, 0x73, /* "s" */
            0x01, 0x00, 0x12, /* "Ljava/lang/String;" */
                0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 
                0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 
                0x67, 0x3b,
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x08, /* "<clinit>" */
                0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x0c, 0x00, 0x0f, 0x00, 0x10, /* nameandtype */
            0x0c, 0x00, 0x11, 0x00, 0x12, /* nameandtype */
            0x0c, 0x00, 0x13, 0x00, 0x14, /* nameandtype */
            0x0c, 0x00, 0x15, 0x00, 0x16, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 
            0x0c, 0x00, 0x17, 0x00, 0x18, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x03, 0x00, 0x01, 0x02, 0x03, /* integer */
        /* Remainder */ 
        0x00, 0x21, 0x00, 0x0d, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x09, 0x00,
        0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x11, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x13, 0x00, 0x14, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x15, 0x00, 0x16, 0x00, 0x00, 0x00, 0x09, 0x00,
        0x17, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x19, 0x00, 0x1a, 0x00, 0x01, 0x00,
        0x1b, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00,
        0x01, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1c,
        0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x08, 0x00, 0x1d, 0x00, 0x1a,
        0x00, 0x01, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x49,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d,
        0x11, 0x7d, 0x6d, 0xb3, 0x00, 0x02, 0x14, 0x00,
        0x03, 0xb3, 0x00, 0x05, 0x12, 0x06, 0xb3, 0x00,
        0x07, 0x14, 0x00, 0x08, 0xb3, 0x00, 0x0a, 0x12,
        0x0b, 0xb3, 0x00, 0x0c, 0xb1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00,
        0x03, 0x00, 0x0c, 0x00, 0x04, 0x00, 0x11, 0x00,
        0x05, 0x00, 0x17, 0x00, 0x06, 0x00, 0x1c, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x1f
    };

    /* Another correct class from which following tests are derived */
    private static int[] properClassBytesB = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[36] */
    /* Class constant entry referencing non-string constant */
    private static int[] invClassStrIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x03, /* ERROR: class index invalid */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[37*] */
    /* Invalid class cross-index in method reference */
    private static int[] badMethodRefClassIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x01, 0x00, 0x10, /* ERROR: methodref class idx bad */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[38*] */
    /* Invalid nameandtype cross-index in method reference */
    private static int[] badMethodRefNATIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x0a, /* ERROR - methodref bad NT index */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[37*] */
    /* Invalid class cross-index in field reference */
    private static int[] badFieldRefClassIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x01, 0x02, 0x00, 0x12, /* ERROR - fieldref index range */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[38*] */
    /* Invalid nameandtype cross-index in field reference */
    private static int[] badFieldRefNATIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x0d, /* ERROR - fieldref nametype index */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[37*] */
    /* Invalid class cross-index in interface method reference */
    private static int[] badIFMethodRefClassIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x04, 0x00, 0x16, /* ERROR - ifmethodref class index */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[38*] */
    /* Invalid nameandtype cross-index in interface method reference */
    private static int[] badIFMethodRefNATIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x00, /* ERROR - ifmethodref nametype idx */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[39] */
    /* String cross-index incorrect */
    private static int[] badStringIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x07, /* ERROR - bad string index */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[40] */
    /* Name/type name index not a string constant */
    private static int[] invNameTypeNameIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x02, /* ERROR - invalid name index */
                      0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /* INTERNAL - classparser[41] */
    /* Name/type type index not a string constant */
    private static int[] invNameTypeTypeIdxBytes = {
        /* Header */
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        /* Constant Pool */
        0x00, 0x1f, 
            0x0a, 0x00, 0x09, 0x00, 0x10, /* methodref */
            0x07, 0x00, 0x11, /* class */
            0x0a, 0x00, 0x02, 0x00, 0x10, /* methodref */
            0x09, 0x00, 0x02, 0x00, 0x12, /* fieldref */
            0x08, 0x00, 0x13, /* string */
            0x0a, 0x00, 0x02, 0x00, 0x14, /* methodref */
            0x0b, 0x00, 0x15, 0x00, 0x16, /* ifmethodref */
            0x07, 0x00, 0x17, /* class */
            0x07, 0x00, 0x18,/* class */
            0x01, 0x00, 0x06, /* "<init>" */
                0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e,
            0x01, 0x00, 0x03, 0x28, 0x29, 0x56, /* "()V" */
            0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, /* "Code" */
            0x01, 0x00, 0x0f, /* "LineNumberTable" */
                0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 
            0x01, 0x00, 0x0a, /* "SourceFile" */
                0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 
                0x6c, 0x65, 
            0x01, 0x00, 0x07, /* "cp.java" */
                0x63, 0x70, 0x2e, 0x6a, 0x61, 0x76, 0x61, 
            0x0c, 0x00, 0x0a, 0x00, 0x0b, /* nameandtype */
            0x01, 0x00, 0x03, 0x63, 0x70, 0x78, /* "cpx" */
            0x0c, 0x00, 0x19, 0x00, 0x1a, /* nameandtype */
            0x01, 0x00, 0x07, /* "Testing" */
                0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
            0x0c, 0x00, 0x1b, 0x00, 0x1c, /* nameandtype */
            0x07, 0x00, 0x1d, /* class */
            0x0c, 0x00, 0x1e, 0x00, 0x03, /* ERROR - invalid type index */
                                  /* nameandtype */
            0x01, 0x00, 0x02, 0x63, 0x70, /* "cp" */
            0x01, 0x00, 0x10, /* "java/lang/Object" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 
            0x01, 0x00, 0x05, /* "field" */
                0x66, 0x69, 0x65, 0x6c, 0x64, 
            0x01, 0x00, 0x01, 0x49, /* "I" */
            0x01, 0x00, 0x04, 0x6d, 0x65, 0x74, 0x68,
            0x01, 0x00, 0x15, /* "(Ljava/lang/String;)V" */
                0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 
                0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 
                0x6e, 0x67, 0x3b, 0x29, 0x56, 
            0x01, 0x00, 0x12, /* "java/lang/Runnable" */
                0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
                0x67, 0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 
                0x6c, 0x65,  
            0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, /* "run" */
        /* Remainder */
        0x00, 0x21, 0x00, 0x08, 0x00,
        0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x01, 0x00,
        0x0c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x02, 0x00,
        0x03, 0x00, 0x00, 0x00, 0x21, 0x2a, 0xb7, 0x00,
        0x01, 0xbb, 0x00, 0x02, 0x59, 0xb7, 0x00, 0x03,
        0x4c, 0x2b, 0x10, 0x06, 0xb5, 0x00, 0x04, 0x2b,
        0x12, 0x05, 0xb6, 0x00, 0x06, 0x2b, 0x4d, 0x2c,
        0xb9, 0x00, 0x07, 0x01, 0x00, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e,
        0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x0d, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x12,
        0x00, 0x0f, 0x00, 0x18, 0x00, 0x11, 0x00, 0x1a,
        0x00, 0x12, 0x00, 0x20, 0x00, 0x13, 0x00, 0x01,
        0x00, 0x0e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0f
    };

    /**
     * Locally run through the test cases.
     */
    public static void main(String argv[]) {
        /* Use an instance of myself for testing */
        ConstantPool tstInstance = new ConstantPool();

        /* Constant pool set way too small*/
        try {
            tstInstance.localDefineClass("cp", onePoolEntryBytes);
            throw new Error("ERROR: Ultra-small constant pool parsed");
        } catch (ClassFormatError ex) {}

        /* Constant pool type well outside of range */
        try {
            tstInstance.localDefineClass("cp", badPoolTypeOutsideBytes);
            throw new Error("ERROR: Pool type out of range parsed");
        } catch (ClassFormatError ex) {}

        /* Constant pool type inside of range */
        try {
            tstInstance.localDefineClass("cp", badPoolTypeInsideBytes);
            throw new Error("ERROR: Pool type within range parsed");
        } catch (ClassFormatError ex) {}

        /* Bad class value string index */
        try {
            tstInstance.localDefineClass("cp", invClassStrIdxBytes);
            throw new Error("ERROR: Invalid class string index parsed");
        } catch (ClassFormatError ex) {}

        /* Bad methodref class index */
        try {
            tstInstance.localDefineClass("cp", badMethodRefClassIdxBytes);
            throw new Error("ERROR: Invalid methodref class index parsed");
        } catch (ClassFormatError ex) {}

        /* Bad methodref name and type index */
        try {
            tstInstance.localDefineClass("cp", badMethodRefNATIdxBytes);
            throw new Error("ERROR: Invalid methodref nametype index parsed");
        } catch (ClassFormatError ex) {}

        /* Bad fieldref class index */
        try {
            tstInstance.localDefineClass("cp", badFieldRefClassIdxBytes);
            throw new Error("ERROR: Invalid fieldref class index parsed");
        } catch (ClassFormatError ex) {}

        /* Bad fieldref name and type index */
        try {
            tstInstance.localDefineClass("cp", badFieldRefNATIdxBytes);
            throw new Error("ERROR: Invalid fieldref nametype index parsed");
        } catch (ClassFormatError ex) {}

        /* Bad interface methodref class index */
        try {
            tstInstance.localDefineClass("cp", badIFMethodRefClassIdxBytes);
            throw new Error("ERROR: Invalid ifmethodref class index parsed");
        } catch (ClassFormatError ex) {}

        /* Bad interface methodref name and type index */
        try {
            tstInstance.localDefineClass("cp", badIFMethodRefNATIdxBytes);
            throw new Error("ERROR: Invalid ifmethodref nametype index parsed");
        } catch (ClassFormatError ex) {}

        /* Bad string index */
        try {
            tstInstance.localDefineClass("cp", badStringIdxBytes);
            throw new Error("ERROR: Invalid string index parsed");
        } catch (ClassFormatError ex) {}

        /* Invalid nameAndType name index */
        try {
            tstInstance.localDefineClass("cp", invNameTypeNameIdxBytes);
            throw new Error("ERROR: Invalid name/type name index parsed");
        } catch (ClassFormatError ex) {}

        /* Invalid nameAndType type index */
        try {
            tstInstance.localDefineClass("cp", invNameTypeTypeIdxBytes);
            throw new Error("ERROR: Invalid name/type type index parsed");
        } catch (ClassFormatError ex) {}

        /* After all the failures, it should be usable */
        tstInstance.localDefineClass("cp", properClassBytes);
    }

    /**
     * Local method to wrap class definition with integer byte arrays.
     */
    public void localDefineClass(String className, int[] byteData) {
        byte[] dataSet = new byte[2048];

        for (int i = 0; i < byteData.length; i++) {
            dataSet[i] = (byte) byteData[i];
        }
        defineClass(className, dataSet, 0, byteData.length);
    }

    /**
     * Method to provide support for JDK1.1 compilers.
     */
    public Class loadClass(String className, boolean resolve)
            throws ClassNotFoundException {
        return Class.forName(className);
    }
}
