// Indigo VM testsuite for testing interface information parsing failures.
// Copyright (C) 1999-2004 J.M. Heisz 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// See the file named COPYRIGHT in the root directory of the source
// distribution for specific references to the GNU General Public License,
// as well as further clarification on your rights to use this software.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

package wrdg.indigo.parser;

/**
 * <P>
 * Indigo test program to test the parsing of improper class/interface
 * information.
 * </P>
 *
 * <P>Copyright (&#169;) 1999-2004 J.M. Heisz</P>
 *
 * <P>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.</P>
 *
 * @author J.M. Heisz
 * @version $Revision: 1.3 $ $Date: 2004/01/05 12:42:13 $
 */

public class Interfaces extends ClassLoader {
    /* These are the proper classes from which the tests are derived */
    private static int[] ifoneBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x09, 0x07, 0x00, 0x07, 0x07, 0x00, 0x08,
        0x01, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x0a, 0x53,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
        0x65, 0x01, 0x00, 0x08, 0x69, 0x6e, 0x66, 0x2e,
        0x6a, 0x61, 0x76, 0x61, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x10, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x00, /* no interfaces */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x03, 
        0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x06
    };
    private static int[] iftwoBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x0b, 0x07, 0x00, 0x08, 0x07, 0x00, 0x09,
        0x07, 0x00, 0x0a, 0x01, 0x00, 0x03, 0x74, 0x77,
        0x6f, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
        0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
        0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69,
        0x6e, 0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x01,
        0x00, 0x05, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x01,
        0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,
        0x63, 0x74, 0x01, 0x00, 0x05, 0x69, 0x66, 0x6f,
        0x6e, 0x65, 
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x01, 0x00, 0x03, /* one superinterface */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x04, 
        0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x07
    };
    private static int[] ifthreeBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x09, 0x07, 0x00, 0x07, 0x07, 0x00, 0x08,
        0x01, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
        0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00,
        0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
        0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69, 0x6e,
        0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x01, 0x00,
        0x07, 0x69, 0x66, 0x74, 0x68, 0x72, 0x65, 0x65,
        0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f,
        0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a,
        0x65, 0x63, 0x74, 
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x00, /* no interface */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x03, 
        0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x06
    };
    private static int[] infBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x13, 0x0a, 0x00, 0x03, 0x00, 0x0d, 0x07,
        0x00, 0x0e, 0x07, 0x00, 0x0f, 0x07, 0x00, 0x10,
        0x07, 0x00, 0x11, 0x07, 0x00, 0x12, 0x01, 0x00,
        0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01,
        0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04,
        0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c,
        0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
        0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00,
        0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
        0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69, 0x6e,
        0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00,
        0x07, 0x00, 0x08, 0x01, 0x00, 0x03, 0x69, 0x6e,
        0x66, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
        0x6a, 0x65, 0x63, 0x74, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x74, 0x77, 0x6f, 0x01, 0x00, 0x07, 0x69,
        0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 
        0x04, 0x20, /* abstract, super */
        0x00, 0x02, /* class */
        0x00, 0x03, /* superclass */
        0x00, 0x03, /* three superinterfaces */
              0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 
        0x00, 0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00,
        0x01, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x0c
    };

    /* INTERNAL - classparser[57] */
    /* Non-abstract interface */
    private static int[] nonAbstractInterfaceBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x09, 0x07, 0x00, 0x07, 0x07, 0x00, 0x08,
        0x01, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x0a, 0x53,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
        0x65, 0x01, 0x00, 0x08, 0x69, 0x6e, 0x66, 0x2e,
        0x6a, 0x61, 0x76, 0x61, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x10, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
        0x02, 0x00, /* ERROR - non-abstract interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x00, /* no interfaces */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x03, 
        0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x06
    };

    /* INTERNAL - classparser[14] */
    /* Final abstract interface */
    private static int[] finalAbstractInterfaceBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x09, 0x07, 0x00, 0x07, 0x07, 0x00, 0x08,
        0x01, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x0a, 0x53,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
        0x65, 0x01, 0x00, 0x08, 0x69, 0x6e, 0x66, 0x2e,
        0x6a, 0x61, 0x76, 0x61, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x10, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
        0x06, 0x10, /* ERROR - final, abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x00, /* no interfaces */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x03, 
        0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x06
    };

    /* INTERNAL - classparser[35] */
    /* Non-object interface */
    private static int[] nonObjectInterfaceBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x09, 0x07, 0x00, 0x07, 0x07, 0x00, 0x08,
        0x01, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x0a, 0x53,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
        0x65, 0x01, 0x00, 0x08, 0x69, 0x6e, 0x66, 0x2e,
        0x6a, 0x61, 0x76, 0x61, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 
        0x00, 0x10, /* ERROR - java/lang/Thread */
        0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 
        0x67, 0x2f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x00, /* no interfaces */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x03, 
        0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x06
    };

    /* INTERNAL - classparser[34] */
    /* Bad interface superclass index */
    private static int[] badSuperclassIdxBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x09, 0x07, 0x00, 0x07, 0x07, 0x00, 0x08,
        0x01, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x0a, 0x53,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
        0x65, 0x01, 0x00, 0x08, 0x69, 0x6e, 0x66, 0x2e,
        0x6a, 0x61, 0x76, 0x61, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x10, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x0F, /* ERROR - invalid superclass */
        0x00, 0x00, /* no interfaces */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x03, 
        0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x06
    };

    /* INTERNAL - classparser[15] */
    /* Truncated interface count */
    private static int[] truncIfCountBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x09, 0x07, 0x00, 0x07, 0x07, 0x00, 0x08,
        0x01, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x0a, 0x53,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
        0x65, 0x01, 0x00, 0x08, 0x69, 0x6e, 0x66, 0x2e,
        0x6a, 0x61, 0x76, 0x61, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x10, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, /* ERROR - truncated count */
    };

    /* INTERNAL - classparser[56] */
    /* Bad interface index (improper constant entry) */
    private static int[] badIfIndexBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x0b, 0x07, 0x00, 0x08, 0x07, 0x00, 0x09,
        0x07, 0x00, 0x0a, 0x01, 0x00, 0x03, 0x74, 0x77,
        0x6f, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
        0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
        0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69,
        0x6e, 0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x01,
        0x00, 0x05, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x01,
        0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,
        0x63, 0x74, 0x01, 0x00, 0x05, 0x69, 0x66, 0x6f,
        0x6e, 0x65, 
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x01, 0x00, 0x09, /* ERROR - bad superif index */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x04, 
        0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x07
    };

    /* INTERNAL - classparser[56*] */
    /* Invalid interface index */
    private static int[] invalidIfIndexOneBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x0b, 0x07, 0x00, 0x08, 0x07, 0x00, 0x09,
        0x07, 0x00, 0x0a, 0x01, 0x00, 0x03, 0x74, 0x77,
        0x6f, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
        0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
        0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69,
        0x6e, 0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x01,
        0x00, 0x05, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x01,
        0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,
        0x63, 0x74, 0x01, 0x00, 0x05, 0x69, 0x66, 0x6f,
        0x6e, 0x65, 
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x01, 0x00, 0x00, /* ERROR - invalid superif index */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x04, 
        0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x07
    };

    /* INTERNAL - classparser[56*] */
    /* Invalid interface index */
    private static int[] invalidIfIndexTwoBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x0b, 0x07, 0x00, 0x08, 0x07, 0x00, 0x09,
        0x07, 0x00, 0x0a, 0x01, 0x00, 0x03, 0x74, 0x77,
        0x6f, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
        0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
        0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69,
        0x6e, 0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x01,
        0x00, 0x05, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x01,
        0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,
        0x63, 0x74, 0x01, 0x00, 0x05, 0x69, 0x66, 0x6f,
        0x6e, 0x65, 
        0x06, 0x00, /* abstract, interface */
        0x00, 0x01, /* class */
        0x00, 0x02, /* superclass */
        0x00, 0x01, 0x12, 0x34, /* ERROR - invalid superclass index */
        0x00, 0x00, 0x00, 0x01, 0x04, 0x01, 0x00, 0x04, 
        0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 
        0x00, 0x00, 0x00, 0x02, 0x00, 0x07
    };

    /* INTERNAL - classparser[15] */
    /* Truncated in interface table */
    private static int[] truncIfEntryBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x13, 0x0a, 0x00, 0x03, 0x00, 0x0d, 0x07,
        0x00, 0x0e, 0x07, 0x00, 0x0f, 0x07, 0x00, 0x10,
        0x07, 0x00, 0x11, 0x07, 0x00, 0x12, 0x01, 0x00,
        0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01,
        0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04,
        0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c,
        0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
        0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00,
        0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
        0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69, 0x6e,
        0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00,
        0x07, 0x00, 0x08, 0x01, 0x00, 0x03, 0x69, 0x6e,
        0x66, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
        0x6a, 0x65, 0x63, 0x74, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x74, 0x77, 0x6f, 0x01, 0x00, 0x07, 0x69,
        0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 
        0x04, 0x20, /* abstract, super */
        0x00, 0x02, /* class */
        0x00, 0x03, /* superclass */
        0x00, 0x04, /* ERROR - three and a half interfaces */
              0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00
    };

    /* INTERNAL - classparser[16] */
    /* Truncated after interface table */
    private static int[] truncIfEndBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x13, 0x0a, 0x00, 0x03, 0x00, 0x0d, 0x07,
        0x00, 0x0e, 0x07, 0x00, 0x0f, 0x07, 0x00, 0x10,
        0x07, 0x00, 0x11, 0x07, 0x00, 0x12, 0x01, 0x00,
        0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01,
        0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04,
        0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c,
        0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
        0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00,
        0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
        0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69, 0x6e,
        0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00,
        0x07, 0x00, 0x08, 0x01, 0x00, 0x03, 0x69, 0x6e,
        0x66, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
        0x6a, 0x65, 0x63, 0x74, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x74, 0x77, 0x6f, 0x01, 0x00, 0x07, 0x69,
        0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 
        0x04, 0x20, /* abstract, super */
        0x00, 0x02, /* class */
        0x00, 0x03, /* superclass */
        0x00, 0x03, /* ERROR - ends after interfaces */
              0x00, 0x04, 0x00, 0x05, 0x00, 0x06
    };

    /* INTERNAL - classparser[58] */
    /* Duplicated interface names (indices) */
    private static int[] dupIfIdxBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x13, 0x0a, 0x00, 0x03, 0x00, 0x0d, 0x07,
        0x00, 0x0e, 0x07, 0x00, 0x0f, 0x07, 0x00, 0x10,
        0x07, 0x00, 0x11, 0x07, 0x00, 0x12, 0x01, 0x00,
        0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01,
        0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04,
        0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c,
        0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
        0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00,
        0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
        0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69, 0x6e,
        0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00,
        0x07, 0x00, 0x08, 0x01, 0x00, 0x03, 0x69, 0x6e,
        0x66, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
        0x6a, 0x65, 0x63, 0x74, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x74, 0x77, 0x6f, 0x01, 0x00, 0x07, 0x69,
        0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 
        0x04, 0x20, /* abstract, super */
        0x00, 0x02, /* class */
        0x00, 0x03, /* superclass */
        0x00, 0x03, /* ERROR - three superinterfaces, two identical */
              0x00, 0x04, 0x00, 0x04, 0x00, 0x06, 
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 
        0x00, 0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00,
        0x01, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x0c
    };

    /* INTERNAL - classparser[58*] */
    /* Duplicated interface names (strings) */
    private static int[] dupIfStrBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x03, 0x00, 0x2d,
        0x00, 0x13, 0x0a, 0x00, 0x03, 0x00, 0x0d, 0x07,
        0x00, 0x0e, 0x07, 0x00, 0x0f, 0x07, 0x00, 0x10,
        0x07, 0x00, 0x11, 0x07, 0x00, 0x12, 0x01, 0x00,
        0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01,
        0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04,
        0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c,
        0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
        0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00,
        0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
        0x69, 0x6c, 0x65, 0x01, 0x00, 0x08, 0x69, 0x6e,
        0x66, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00,
        0x07, 0x00, 0x08, 0x01, 0x00, 0x03, 0x69, 0x6e,
        0x66, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
        0x6a, 0x65, 0x63, 0x74, 0x01, 0x00, 0x05, 0x69,
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x05, 0x69,
        /* ERROR - infone, infone, infthree */
        0x66, 0x6f, 0x6e, 0x65, 0x01, 0x00, 0x07, 0x69,
        0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 
        0x04, 0x20, /* abstract, super */
        0x00, 0x02, /* class */
        0x00, 0x03, /* superclass */
        0x00, 0x03, /* three superinterfaces */
              0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 
        0x00, 0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 
        0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00,
        0x01, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x0c
    };

    /**
     * Locally run through the test cases.
     */
    public static void main(String argv[]) {
        /**
         * NOTE: the Sun VM does not follow the specifications in
         * some of these test cases.  Provide the "-sun" argument
         * to skip these tests.
         */
        boolean skipSun = false;
        if ((argv.length != 0) && (argv[0].equals("-sun"))) skipSun = true;

        /* Use an instance of myself for testing */
        Interfaces tstInstance = new Interfaces();

        /* Non-abstract interface instance */
        if (!skipSun) {
            /* Sun VM just ignores this case */
            try {
                tstInstance.localDefineClass("ifone", 
                                             nonAbstractInterfaceBytes);
                throw new Error("ERROR: Non-abstract interface parsed");
            } catch (ClassFormatError ex) {}
        }

        /* Final abstract interface instance */
        try {
            tstInstance.localDefineClass("ifone", finalAbstractInterfaceBytes);
            throw new Error("ERROR: Final-abstract interface parsed");
        } catch (ClassFormatError ex) {}

        /* Interface not an object */
        try {
            tstInstance.localDefineClass("ifone", nonObjectInterfaceBytes);
            throw new Error("ERROR: Non-object interface parsed");
        } catch (ClassFormatError ex) {}

        /* Interface superclass index invalid */
        try {
            tstInstance.localDefineClass("ifone", badSuperclassIdxBytes);
            throw new Error("ERROR: Invalid superclass idx interface parsed");
        } catch (ClassFormatError ex) {}

        /* Truncated interface count */
        try {
            tstInstance.localDefineClass("ifone", truncIfCountBytes);
            throw new Error("ERROR: Truncated interface count parsed");
        } catch (ClassFormatError ex) {}

        /* After all the failures, it should be usable */
        tstInstance.localDefineClass("ifone", ifoneBytes);

        /* Bad interface index */
        try {
            tstInstance.localDefineClass("iftwo", badIfIndexBytes);
            throw new Error("ERROR: Bad interface index parsed");
        } catch (ClassFormatError ex) {}

        /* Invalid interface index */
        try {
            tstInstance.localDefineClass("iftwo", invalidIfIndexOneBytes);
            throw new Error("ERROR: Invalid interface index parsed");
        } catch (ClassFormatError ex) {}

        /* Invalid interface index (part two) */
        try {
            tstInstance.localDefineClass("iftwo", invalidIfIndexTwoBytes);
            throw new Error("ERROR: Invalid interface index parsed");
        } catch (ClassFormatError ex) {}

        /* After all the failures, it should be usable */
        tstInstance.localDefineClass("iftwo", iftwoBytes);

        /* Just let this one be for now */
        tstInstance.localDefineClass("ifthree", ifthreeBytes);

        /* Truncated inside interface entries */
        try {
            tstInstance.localDefineClass("inf", truncIfEntryBytes);
            throw new Error("ERROR: Truncated interface index parsed");
        } catch (ClassFormatError ex) {}

        /* Truncated after interface entries */
        try {
            tstInstance.localDefineClass("inf", truncIfEndBytes);
            throw new Error("ERROR: Truncated interface end parsed");
        } catch (ClassFormatError ex) {}

        /* Duplicated interface entries */
        try {
            tstInstance.localDefineClass("inf", dupIfStrBytes);
            throw new Error("ERROR: Duplicated interface names parsed");
        } catch (ClassFormatError ex) {}
        try {
            tstInstance.localDefineClass("inf", dupIfIdxBytes);
            throw new Error("ERROR: Duplicated interface indices parsed");
        } catch (ClassFormatError ex) {}

        /* After all the failures, it should be usable */
        tstInstance.localDefineClass("inf", infBytes);
    }

    /**
     * Local method to wrap class definition with integer byte arrays.
     */
    public void localDefineClass(String className, int[] byteData) {
        byte[] dataSet = new byte[2048];

        for (int i = 0; i < byteData.length; i++) {
            dataSet[i] = (byte) byteData[i];
        }
        defineClass(className, dataSet, 0, byteData.length);
    }

    /**
     * Method to provide support for JDK1.1 compilers.
     */
    public Class loadClass(String className, boolean resolve)
            throws ClassNotFoundException {
        return Class.forName(className);
    }
}
