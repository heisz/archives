//
// Indigo VM testsuite for testing class initialization handling (and errors).
// Copyright (C) 1999-2004 J.M. Heisz 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// See the file named COPYRIGHT in the root directory of the source
// distribution for specific references to the GNU General Public License,
// as well as further clarification on your rights to use this software.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

package wrdg.indigo.runtime;

/**
 * <P>
 * Indigo test program to test the initialization of classes (with errors).
 * </P>
 *
 * <P>Copyright (&#169;) 1999-2004 J.M. Heisz</P>
 *
 * <P>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.</P>
 *
 * @author J.M. Heisz
 * @version $Revision: 1.2 $
 */

/** NOTE: these appear for documentation only (in binary form in main class) **/

/**
 * The following two classes will have failures in their initialization
 * sequences.  Where and how they will fail depends on the static failureMode
 * value in the ClassInitialization instance, with the following values:
 *
 *   1 - throws an UnknownError in the superclass (should not be modified
 *       by the VM according to the VM specification)
 *   2 - throws a NullPointerException in the superclass (converted by the VM
 *       to a ExceptionInInitializationError)
 *   3 - throws an UnknownError in the main class (should not be modified
 *       by the VM according to the VM specification)
 *   4 - throws a NullPointerException in the main class (converted by the VM
 *       to a ExceptionInInitializationError)
 */
/*
public class InitializationTestSuperClass {
    public static int statField;
    public final static int statInt = 3;

    public static void statMethod() {
    }

    static {
        if (Initialization.failureMode == 1) {
            throw new UnknownError("Test error");
        } else if (Initialization.failureMode == 2) {
            Object obj = null;
            int hash = obj.hashCode();
        }
    }
}

public class InitializationTestMainClass extends InitializationTestSuperClass {
    public static int statField;
    public final static String statStr = "Static";

    public static void statMethod() {
    }

    static {
        if (Initialization.failureMode == 3) {
            throw new UnknownError("Test error");
        } else if (Initialization.failureMode == 4) {
            Object obj = null;
            int hash = obj.hashCode();
        }
    }
}
*/

/**
 * The wrapper class which encapsulates the test operations.  Needs
 * to be specifically separated to ensure that new instances of the classes
 * are reloaded (so they can reinitialize).
 */
/*
public class InitializationTest implements Runnable {
    ** Do the test!!! **
    public void run() {
        ** First failure should be general Error or remapped to EIIError **
        try {
            if (Initialization.failureTrigger == 1) {
                ** New instance **
                InitializationTestMainClass mc = 
                                  new InitializationTestMainClass();
                throw new Error("ERROR: init passed on newInstance");
            } else if (Initialization.failureTrigger == 2) {
                ** Get static **
                int s = InitializationTestMainClass.statField;
                throw new Error("ERROR: init passed on getStatic");
            } else if (Initialization.failureTrigger == 3) {
                ** Put static **
                InitializationTestMainClass.statField = 12;
                throw new Error("ERROR: init passed on putStatic");
            } else if (Initialization.failureTrigger == 4) {
                ** Invoke static **
                InitializationTestMainClass.statMethod();
                throw new Error("ERROR: init passed on invokeStatic");
            }
        } catch (ExceptionInInitializerError ex) {
            if ((Initialization.failureMode != 2) &&
                            (Initialization.failureMode != 4)) {
                throw new Error("ERROR: incorrect initialization failure");
            }
        } catch (UnknownError ex) {
            if ((Initialization.failureMode != 1) &&
                            (Initialization.failureMode != 3)) {
                throw new Error("ERROR: incorrect initialization failure");
            }
        }

        ** All subsequent access should result in NoClassDefFoundError **
        try {
            InitializationTestMainClass mc = 
                                  new InitializationTestMainClass();
            throw new Error("ERROR: reinit passed on newInstance");
        } catch (NoClassDefFoundError err) {}

        try {
            int s = InitializationTestMainClass.statField;
            throw new Error("ERROR: reinit passed on getStatic");
        } catch (NoClassDefFoundError err) {}

        try {
            InitializationTestMainClass.statField = 12;
            throw new Error("ERROR: reinit passed on putStatic");
        } catch (NoClassDefFoundError err) {}

        try {
            InitializationTestMainClass.statMethod();
            throw new Error("ERROR: reinit passed on invokeStatic");
        } catch (NoClassDefFoundError err) {}
    }
}
*/

public class Initialization extends ClassLoader {
    /* Binary representations of the above classes (made public) */
    private static int[] tstSuperBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x24, 0x0a, 0x00, 0x08, 0x00, 0x16, 0x09,
        0x00, 0x17, 0x00, 0x18, 0x07, 0x00, 0x19, 0x08,
        0x00, 0x1a, 0x0a, 0x00, 0x03, 0x00, 0x1b, 0x0a,
        0x00, 0x08, 0x00, 0x1c, 0x07, 0x00, 0x1d, 0x07,
        0x00, 0x1e, 0x01, 0x00, 0x09, 0x73, 0x74, 0x61,
        0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x01, 0x00,
        0x01, 0x49, 0x01, 0x00, 0x07, 0x73, 0x74, 0x61,
        0x74, 0x49, 0x6e, 0x74, 0x01, 0x00, 0x0d, 0x43,
        0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56,
        0x61, 0x6c, 0x75, 0x65, 0x03, 0x00, 0x00, 0x00,
        0x03, 0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69,
        0x74, 0x3e, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56,
        0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x01,
        0x00, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
        0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
        0x65, 0x01, 0x00, 0x0a, 0x73, 0x74, 0x61, 0x74,
        0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x01, 0x00,
        0x08, 0x3c, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x74,
        0x3e, 0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72,
        0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00,
        0x21, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
        0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
        0x65, 0x73, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72,
        0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x6a, 0x61,
        0x76, 0x61, 0x0c, 0x00, 0x0e, 0x00, 0x0f, 0x07,
        0x00, 0x1f, 0x0c, 0x00, 0x20, 0x00, 0x0a, 0x01,
        0x00, 0x16, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x55, 0x6e, 0x6b, 0x6e,
        0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
        0x01, 0x00, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x20,
        0x65, 0x72, 0x72, 0x6f, 0x72, 0x0c, 0x00, 0x0e,
        0x00, 0x21, 0x0c, 0x00, 0x22, 0x00, 0x23, 0x01,
        0x00, 0x30, 0x77, 0x72, 0x64, 0x67, 0x2f, 0x69,
        0x6e, 0x64, 0x69, 0x67, 0x6f, 0x2f, 0x72, 0x75,
        0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x49, 0x6e,
        0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
        0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74,
        0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x6c, 0x61,
        0x73, 0x73, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 0x01, 0x00, 0x22,
        0x77, 0x72, 0x64, 0x67, 0x2f, 0x69, 0x6e, 0x64,
        0x69, 0x67, 0x6f, 0x2f, 0x72, 0x75, 0x6e, 0x74,
        0x69, 0x6d, 0x65, 0x2f, 0x49, 0x6e, 0x69, 0x74,
        0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x01, 0x00, 0x0b, 0x66, 0x61, 0x69,
        0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65,
        0x01, 0x00, 0x15, 0x28, 0x4c, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53,
        0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x56,
        0x01, 0x00, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x03, 0x28, 0x29,
        0x49, 0x00, 0x21, 0x00, 0x07, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x09, 0x00, 0x09, 0x00,
        0x0a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0b, 0x00,
        0x0a, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x0d, 0x00, 0x03, 0x00, 0x01, 0x00,
        0x0e, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x10, 0x00,
        0x00, 0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x11, 0x00, 0x00,
        0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d,
        0x00, 0x09, 0x00, 0x12, 0x00, 0x0f, 0x00, 0x01,
        0x00, 0x10, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x11, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x42, 0x00,
        0x08, 0x00, 0x13, 0x00, 0x0f, 0x00, 0x01, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x03, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x20, 0xb2, 0x00, 0x02,
        0x04, 0xa0, 0x00, 0x0d, 0xbb, 0x00, 0x03, 0x59,
        0x12, 0x04, 0xb7, 0x00, 0x05, 0xbf, 0xb2, 0x00,
        0x02, 0x05, 0xa0, 0x00, 0x0a, 0x01, 0x4b, 0x2a,
        0xb6, 0x00, 0x06, 0x3c, 0xb1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x45, 0x00, 0x07, 0x00,
        0x46, 0x00, 0x11, 0x00, 0x47, 0x00, 0x18, 0x00,
        0x48, 0x00, 0x1a, 0x00, 0x49, 0x00, 0x1f, 0x00,
        0x44, 0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x15
    };
    private static int[] tstMainBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x28, 0x0a, 0x00, 0x08, 0x00, 0x17, 0x09,
        0x00, 0x18, 0x00, 0x19, 0x07, 0x00, 0x1a, 0x08,
        0x00, 0x1b, 0x0a, 0x00, 0x03, 0x00, 0x1c, 0x0a,
        0x00, 0x1d, 0x00, 0x1e, 0x07, 0x00, 0x1f, 0x07,
        0x00, 0x20, 0x01, 0x00, 0x09, 0x73, 0x74, 0x61,
        0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x01, 0x00,
        0x01, 0x49, 0x01, 0x00, 0x07, 0x73, 0x74, 0x61,
        0x74, 0x53, 0x74, 0x72, 0x01, 0x00, 0x12, 0x4c,
        0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e,
        0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
        0x3b, 0x01, 0x00, 0x0d, 0x43, 0x6f, 0x6e, 0x73,
        0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
        0x65, 0x08, 0x00, 0x21, 0x01, 0x00, 0x06, 0x3c,
        0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00, 0x03,
        0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43, 0x6f,
        0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69, 0x6e,
        0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54,
        0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0a, 0x73,
        0x74, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
        0x64, 0x01, 0x00, 0x08, 0x3c, 0x63, 0x6c, 0x69,
        0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00, 0x0a, 0x53,
        0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
        0x65, 0x01, 0x00, 0x20, 0x49, 0x6e, 0x69, 0x74,
        0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61,
        0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e,
        0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00, 0x0f, 0x00,
        0x10, 0x07, 0x00, 0x22, 0x0c, 0x00, 0x23, 0x00,
        0x0a, 0x01, 0x00, 0x16, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x55, 0x6e,
        0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72,
        0x6f, 0x72, 0x01, 0x00, 0x0a, 0x54, 0x65, 0x73,
        0x74, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x0c,
        0x00, 0x0f, 0x00, 0x24, 0x07, 0x00, 0x25, 0x0c,
        0x00, 0x26, 0x00, 0x27, 0x01, 0x00, 0x2f, 0x77,
        0x72, 0x64, 0x67, 0x2f, 0x69, 0x6e, 0x64, 0x69,
        0x67, 0x6f, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
        0x6d, 0x65, 0x2f, 0x49, 0x6e, 0x69, 0x74, 0x69,
        0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
        0x6e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x69,
        0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x01, 0x00,
        0x30, 0x77, 0x72, 0x64, 0x67, 0x2f, 0x69, 0x6e,
        0x64, 0x69, 0x67, 0x6f, 0x2f, 0x72, 0x75, 0x6e,
        0x74, 0x69, 0x6d, 0x65, 0x2f, 0x49, 0x6e, 0x69,
        0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
        0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53,
        0x75, 0x70, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73,
        0x73, 0x01, 0x00, 0x06, 0x53, 0x74, 0x61, 0x74,
        0x69, 0x63, 0x01, 0x00, 0x22, 0x77, 0x72, 0x64,
        0x67, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f,
        0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
        0x2f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
        0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01,
        0x00, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
        0x65, 0x4d, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x15,
        0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69,
        0x6e, 0x67, 0x3b, 0x29, 0x56, 0x01, 0x00, 0x10,
        0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e,
        0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
        0x01, 0x00, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x03, 0x28, 0x29,
        0x49, 0x00, 0x21, 0x00, 0x07, 0x00, 0x08, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x09, 0x00, 0x09, 0x00,
        0x0a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0b, 0x00,
        0x0c, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x01, 0x00,
        0x0f, 0x00, 0x10, 0x00, 0x01, 0x00, 0x11, 0x00,
        0x00, 0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x00,
        0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d,
        0x00, 0x09, 0x00, 0x13, 0x00, 0x10, 0x00, 0x01,
        0x00, 0x11, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x42, 0x00,
        0x08, 0x00, 0x14, 0x00, 0x10, 0x00, 0x01, 0x00,
        0x11, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x03, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x20, 0xb2, 0x00, 0x02,
        0x06, 0xa0, 0x00, 0x0d, 0xbb, 0x00, 0x03, 0x59,
        0x12, 0x04, 0xb7, 0x00, 0x05, 0xbf, 0xb2, 0x00,
        0x02, 0x07, 0xa0, 0x00, 0x0a, 0x01, 0x4b, 0x2a,
        0xb6, 0x00, 0x06, 0x3c, 0xb1, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x12, 0x00, 0x00, 0x00, 0x1a, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x45, 0x00, 0x07, 0x00,
        0x46, 0x00, 0x11, 0x00, 0x47, 0x00, 0x18, 0x00,
        0x48, 0x00, 0x1a, 0x00, 0x49, 0x00, 0x1f, 0x00,
        0x44, 0x00, 0x01, 0x00, 0x15, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x16
    };
    private static int[] tstBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x3f, 0x0a, 0x00, 0x17, 0x00, 0x20, 0x09,
        0x00, 0x21, 0x00, 0x22, 0x07, 0x00, 0x23, 0x0a,
        0x00, 0x03, 0x00, 0x20, 0x07, 0x00, 0x24, 0x08,
        0x00, 0x25, 0x0a, 0x00, 0x05, 0x00, 0x26, 0x09,
        0x00, 0x03, 0x00, 0x27, 0x08, 0x00, 0x28, 0x08,
        0x00, 0x29, 0x0a, 0x00, 0x03, 0x00, 0x2a, 0x08,
        0x00, 0x2b, 0x07, 0x00, 0x2c, 0x09, 0x00, 0x21,
        0x00, 0x2d, 0x08, 0x00, 0x2e, 0x07, 0x00, 0x2f,
        0x08, 0x00, 0x30, 0x07, 0x00, 0x31, 0x08, 0x00,
        0x32, 0x08, 0x00, 0x33, 0x08, 0x00, 0x34, 0x07,
        0x00, 0x35, 0x07, 0x00, 0x36, 0x07, 0x00, 0x37,
        0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74,
        0x3e, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
        0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x01, 0x00,
        0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
        0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
        0x01, 0x00, 0x03, 0x72, 0x75, 0x6e, 0x01, 0x00,
        0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
        0x69, 0x6c, 0x65, 0x01, 0x00, 0x17, 0x49, 0x6e,
        0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
        0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73, 0x74,
        0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00, 0x19,
        0x00, 0x1a, 0x07, 0x00, 0x38, 0x0c, 0x00, 0x39,
        0x00, 0x3a, 0x01, 0x00, 0x2f, 0x77, 0x72, 0x64,
        0x67, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f,
        0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
        0x2f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
        0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
        0x65, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x43,
        0x6c, 0x61, 0x73, 0x73, 0x01, 0x00, 0x0f, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x01, 0x00,
        0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x3a, 0x20,
        0x69, 0x6e, 0x69, 0x74, 0x20, 0x70, 0x61, 0x73,
        0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6e,
        0x65, 0x77, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
        0x63, 0x65, 0x0c, 0x00, 0x19, 0x00, 0x3b, 0x0c,
        0x00, 0x3c, 0x00, 0x3a, 0x01, 0x00, 0x1f, 0x45,
        0x52, 0x52, 0x4f, 0x52, 0x3a, 0x20, 0x69, 0x6e,
        0x69, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65,
        0x64, 0x20, 0x6f, 0x6e, 0x20, 0x67, 0x65, 0x74,
        0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x01, 0x00,
        0x1f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x3a, 0x20,
        0x69, 0x6e, 0x69, 0x74, 0x20, 0x70, 0x61, 0x73,
        0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x70,
        0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
        0x0c, 0x00, 0x3d, 0x00, 0x1a, 0x01, 0x00, 0x22,
        0x45, 0x52, 0x52, 0x4f, 0x52, 0x3a, 0x20, 0x69,
        0x6e, 0x69, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73,
        0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
        0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74,
        0x69, 0x63, 0x01, 0x00, 0x25, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x45,
        0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
        0x49, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
        0x6c, 0x69, 0x7a, 0x65, 0x72, 0x45, 0x72, 0x72,
        0x6f, 0x72, 0x0c, 0x00, 0x3e, 0x00, 0x3a, 0x01,
        0x00, 0x27, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x3a,
        0x20, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
        0x63, 0x74, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69,
        0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
        0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
        0x65, 0x01, 0x00, 0x16, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x55, 0x6e,
        0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72,
        0x6f, 0x72, 0x01, 0x00, 0x23, 0x45, 0x52, 0x52,
        0x4f, 0x52, 0x3a, 0x20, 0x72, 0x65, 0x69, 0x6e,
        0x69, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65,
        0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6e, 0x65, 0x77,
        0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
        0x01, 0x00, 0x1e, 0x6a, 0x61, 0x76, 0x61, 0x2f,
        0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4e, 0x6f, 0x43,
        0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x66, 0x46,
        0x6f, 0x75, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
        0x72, 0x01, 0x00, 0x21, 0x45, 0x52, 0x52, 0x4f,
        0x52, 0x3a, 0x20, 0x72, 0x65, 0x69, 0x6e, 0x69,
        0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
        0x20, 0x6f, 0x6e, 0x20, 0x67, 0x65, 0x74, 0x53,
        0x74, 0x61, 0x74, 0x69, 0x63, 0x01, 0x00, 0x21,
        0x45, 0x52, 0x52, 0x4f, 0x52, 0x3a, 0x20, 0x72,
        0x65, 0x69, 0x6e, 0x69, 0x74, 0x20, 0x70, 0x61,
        0x73, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
        0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
        0x63, 0x01, 0x00, 0x24, 0x45, 0x52, 0x52, 0x4f,
        0x52, 0x3a, 0x20, 0x72, 0x65, 0x69, 0x6e, 0x69,
        0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64,
        0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x6f,
        0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
        0x01, 0x00, 0x26, 0x77, 0x72, 0x64, 0x67, 0x2f,
        0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x2f, 0x72,
        0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x49,
        0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
        0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x73,
        0x74, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76, 0x61,
        0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62,
        0x6a, 0x65, 0x63, 0x74, 0x01, 0x00, 0x12, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
        0x65, 0x01, 0x00, 0x22, 0x77, 0x72, 0x64, 0x67,
        0x2f, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x2f,
        0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
        0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
        0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, 0x00,
        0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
        0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x01,
        0x00, 0x01, 0x49, 0x01, 0x00, 0x15, 0x28, 0x4c,
        0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e,
        0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
        0x3b, 0x29, 0x56, 0x01, 0x00, 0x09, 0x73, 0x74,
        0x61, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x01,
        0x00, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x01, 0x00, 0x0b, 0x66,
        0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f,
        0x64, 0x65, 0x00, 0x21, 0x00, 0x16, 0x00, 0x17,
        0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x01, 0x00, 0x19, 0x00, 0x1a, 0x00, 0x01,
        0x00, 0x1b, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7,
        0x00, 0x01, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1d, 0x00,
        0x1a, 0x00, 0x01, 0x00, 0x1b, 0x00, 0x00, 0x01,
        0x8a, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
        0xce, 0xb2, 0x00, 0x02, 0x04, 0xa0, 0x00, 0x15,
        0xbb, 0x00, 0x03, 0x59, 0xb7, 0x00, 0x04, 0x4c,
        0xbb, 0x00, 0x05, 0x59, 0x12, 0x06, 0xb7, 0x00,
        0x07, 0xbf, 0xb2, 0x00, 0x02, 0x05, 0xa0, 0x00,
        0x11, 0xb2, 0x00, 0x08, 0x3c, 0xbb, 0x00, 0x05,
        0x59, 0x12, 0x09, 0xb7, 0x00, 0x07, 0xbf, 0xb2,
        0x00, 0x02, 0x06, 0xa0, 0x00, 0x12, 0x10, 0x0c,
        0xb3, 0x00, 0x08, 0xbb, 0x00, 0x05, 0x59, 0x12,
        0x0a, 0xb7, 0x00, 0x07, 0xbf, 0xb2, 0x00, 0x02,
        0x07, 0xa0, 0x00, 0x10, 0xb8, 0x00, 0x0b, 0xbb,
        0x00, 0x05, 0x59, 0x12, 0x0c, 0xb7, 0x00, 0x07,
        0xbf, 0xa7, 0x00, 0x35, 0x4c, 0xb2, 0x00, 0x0e,
        0x05, 0x9f, 0x00, 0x2d, 0xb2, 0x00, 0x0e, 0x07,
        0x9f, 0x00, 0x26, 0xbb, 0x00, 0x05, 0x59, 0x12,
        0x0f, 0xb7, 0x00, 0x07, 0xbf, 0x4d, 0xb2, 0x00,
        0x0e, 0x04, 0x9f, 0x00, 0x14, 0xb2, 0x00, 0x0e,
        0x06, 0x9f, 0x00, 0x0d, 0xbb, 0x00, 0x05, 0x59,
        0x12, 0x0f, 0xb7, 0x00, 0x07, 0xbf, 0xbb, 0x00,
        0x03, 0x59, 0xb7, 0x00, 0x04, 0x4c, 0xbb, 0x00,
        0x05, 0x59, 0x12, 0x11, 0xb7, 0x00, 0x07, 0xbf,
        0x4c, 0xb2, 0x00, 0x08, 0x3c, 0xbb, 0x00, 0x05,
        0x59, 0x12, 0x13, 0xb7, 0x00, 0x07, 0xbf, 0x4c,
        0x10, 0x0c, 0xb3, 0x00, 0x08, 0xbb, 0x00, 0x05,
        0x59, 0x12, 0x14, 0xb7, 0x00, 0x07, 0xbf, 0x4c,
        0xb8, 0x00, 0x0b, 0xbb, 0x00, 0x05, 0x59, 0x12,
        0x15, 0xb7, 0x00, 0x07, 0xbf, 0x4c, 0xb1, 0x00,
        0x06, 0x00, 0x00, 0x00, 0x58, 0x00, 0x5b, 0x00,
        0x0d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x74, 0x00,
        0x10, 0x00, 0x8d, 0x00, 0x9f, 0x00, 0x9f, 0x00,
        0x12, 0x00, 0xa0, 0x00, 0xae, 0x00, 0xae, 0x00,
        0x12, 0x00, 0xaf, 0x00, 0xbe, 0x00, 0xbe, 0x00,
        0x12, 0x00, 0xbf, 0x00, 0xcc, 0x00, 0xcc, 0x00,
        0x12, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x00, 0x00,
        0x7a, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x07, 0x00,
        0x07, 0x00, 0x09, 0x00, 0x0f, 0x00, 0x0b, 0x00,
        0x19, 0x00, 0x0c, 0x00, 0x20, 0x00, 0x0e, 0x00,
        0x24, 0x00, 0x0f, 0x00, 0x2e, 0x00, 0x10, 0x00,
        0x35, 0x00, 0x12, 0x00, 0x3a, 0x00, 0x13, 0x00,
        0x44, 0x00, 0x14, 0x00, 0x4b, 0x00, 0x16, 0x00,
        0x4e, 0x00, 0x17, 0x00, 0x58, 0x00, 0x19, 0x00,
        0x5b, 0x00, 0x1a, 0x00, 0x6a, 0x00, 0x1c, 0x00,
        0x74, 0x00, 0x1f, 0x00, 0x83, 0x00, 0x21, 0x00,
        0x8d, 0x00, 0x27, 0x00, 0x95, 0x00, 0x29, 0x00,
        0x9f, 0x00, 0x2a, 0x00, 0xa0, 0x00, 0x2d, 0x00,
        0xa4, 0x00, 0x2e, 0x00, 0xae, 0x00, 0x2f, 0x00,
        0xaf, 0x00, 0x32, 0x00, 0xb4, 0x00, 0x33, 0x00,
        0xbe, 0x00, 0x34, 0x00, 0xbf, 0x00, 0x37, 0x00,
        0xc2, 0x00, 0x38, 0x00, 0xcc, 0x00, 0x39, 0x00,
        0xcd, 0x00, 0x3a, 0x00, 0x01, 0x00, 0x1e, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x1f
    };

    /* What, where and how will the initialization fail */
    public static int failureMode, failureTrigger;

    /**
     * Locally run through the test cases.
     */
    public static void main(String argv[]) {

        /* Pass through the four different modes of failure */
        for (failureMode = 1; failureMode <= 4; failureMode++) {

            /* And the four initialization triggers */
            for (failureTrigger = 1; failureTrigger <= 4; failureTrigger++) {

                /* Use an instance of myself for testing */
                Initialization tstInstance = new Initialization();

                /* And perform it */
                tstInstance.doTest();
            }
        }
    }

    /**
     * Run an iteration of the test case.  Loads/defines new instances
     * of the test cases and performs the initialization tests.
     */
    public void doTest() {
        /* First, define the classes */
        localDefineClass("wrdg.indigo.runtime.InitializationTestSuperClass",
                         tstSuperBytes);
        localDefineClass("wrdg.indigo.runtime.InitializationTestMainClass",
                         tstMainBytes);
        Class tstClass = 
                     localDefineClass("wrdg.indigo.runtime.InitializationTest",
                                      tstBytes);

        /* Then run the test method (triggers initialization) */
        try {
            Runnable inst = (Runnable) tstClass.newInstance();
            inst.run();
        } catch (InstantiationException e) {
            throw new Error("Cannot create test class instance");
        } catch (IllegalAccessException e) {
            throw new Error("Cannot access test class instance");
        }
    }

    /**
     * Local method to wrap class definition with integer byte arrays.
     */
    public Class localDefineClass(String className, int[] byteData) {
        byte[] dataSet = new byte[2048];

        for (int i = 0; i < byteData.length; i++) {
            dataSet[i] = (byte) byteData[i];
        }
        return defineClass(className, dataSet, 0, byteData.length);
    }

    /**
     * Method to provide support for JDK1.1 compilers.
     */
    public Class loadClass(String className, boolean resolve)
            throws ClassNotFoundException {
        return Class.forName(className);
    }
}
