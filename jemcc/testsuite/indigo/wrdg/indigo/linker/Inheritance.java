// Indigo VM testsuite for testing invalid extends and implements conditions.
// Copyright (C) 1999-2004 J.M. Heisz 
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// See the file named COPYRIGHT in the root directory of the source
// distribution for specific references to the GNU General Public License,
// as well as further clarification on your rights to use this software.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

package wrdg.indigo.linker;

/**
 * <P>
 * Indigo test program to test invalid extends and implements conditions.
 * </P>
 *
 * <P>Copyright (&#169;) 1999-2004 J.M. Heisz</P>
 *
 * <P>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.</P>
 *
 * @author J.M. Heisz
 * @version $Revision: 1.2 $ $Date: 2004/01/05 12:42:13 $
 */

public class Inheritance extends ClassLoader {
    /* public class A */
    private static int[] aClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x0d, 0x0a, 0x00, 0x03, 0x00, 0x0a, 0x07,
        0x00, 0x0b, 0x07, 0x00, 0x0c, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0a,
        0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
        0x6c, 0x65, 0x01, 0x00, 0x06, 0x41, 0x2e, 0x6a,
        0x61, 0x76, 0x61, 0x0c, 0x00, 0x04, 0x00, 0x05,
        0x01, 0x00, 0x01, 0x41, 0x01, 0x00, 0x10, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00,
        0x21, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00,
        0x05, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x09
    };

    /* public interface B */
    private static int[] bClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x07, 0x07, 0x00, 0x05, 0x07, 0x00, 0x06,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x06,
        0x42, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x01, 0x00,
        0x01, 0x42, 0x01, 0x00, 0x10, 0x6a, 0x61, 0x76,
        0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f,
        0x62, 0x6a, 0x65, 0x63, 0x74, 0x06, 0x01, 0x00,
        0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x04
    };

    /* public final class C */
    private static int[] cClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x0d, 0x0a, 0x00, 0x03, 0x00, 0x0a, 0x07,
        0x00, 0x0b, 0x07, 0x00, 0x0c, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0a,
        0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
        0x6c, 0x65, 0x01, 0x00, 0x06, 0x43, 0x2e, 0x6a,
        0x61, 0x76, 0x61, 0x0c, 0x00, 0x04, 0x00, 0x05,
        0x01, 0x00, 0x01, 0x43, 0x01, 0x00, 0x10, 0x6a,
        0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
        0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00,
        0x31, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00,
        0x05, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00,
        0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x09
    };

    /* public class D extends (interface) B */
    private static int[] dClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x0d, 0x0a, 0x00, 0x03, 0x00, 0x0a, 0x07,
        0x00, 0x0b, 0x07, 0x00, 0x0c, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0a,
        0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
        0x6c, 0x65, 0x01, 0x00, 0x06, 0x44, 0x2e, 0x6a,
        0x61, 0x76, 0x61, 0x0c, 0x00, 0x04, 0x00, 0x05,
        0x01, 0x00, 0x01, 0x44, 0x01, 0x00, 0x01, 0x42,
        0x00, 0x21, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x05, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00,
        0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x09
    };

    /* public class E implements (class) A */
    private static int[] eClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x0f, 0x0a, 0x00, 0x03, 0x00, 0x0b, 0x07,
        0x00, 0x0c, 0x07, 0x00, 0x0d, 0x07, 0x00, 0x0e,
        0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74,
        0x3e, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
        0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x01, 0x00,
        0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
        0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x06,
        0x45, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00,
        0x05, 0x00, 0x06, 0x01, 0x00, 0x01, 0x45, 0x01,
        0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,
        0x63, 0x74, 0x01, 0x00, 0x01, 0x41, 0x00, 0x21,
        0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x05,
        0x00, 0x06, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00,
        0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x0a
    };

    /* public class F extends (final class) C */
    private static int[] fClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x0d, 0x0a, 0x00, 0x03, 0x00, 0x0a, 0x07,
        0x00, 0x0b, 0x07, 0x00, 0x0c, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0a,
        0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
        0x6c, 0x65, 0x01, 0x00, 0x06, 0x46, 0x2e, 0x6a,
        0x61, 0x76, 0x61, 0x0c, 0x00, 0x04, 0x00, 0x05,
        0x01, 0x00, 0x01, 0x46, 0x01, 0x00, 0x01, 0x43,
        0x00, 0x21, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x05, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00,
        0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x09
    };

    /* public interface G extends (class) A */
    private static int[] gClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x09, 0x07, 0x00, 0x06, 0x07, 0x00, 0x07,
        0x07, 0x00, 0x08, 0x01, 0x00, 0x0a, 0x53, 0x6f,
        0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65,
        0x01, 0x00, 0x06, 0x47, 0x2e, 0x6a, 0x61, 0x76,
        0x61, 0x01, 0x00, 0x01, 0x47, 0x01, 0x00, 0x10,
        0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e,
        0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
        0x01, 0x00, 0x01, 0x41, 0x06, 0x01, 0x00, 0x01,
        0x00, 0x02, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x05
    };

    /* public class H extends [A */
    private static int[] hClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x0d, 0x0a, 0x00, 0x03, 0x00, 0x0a, 0x07,
        0x00, 0x0b, 0x07, 0x00, 0x0c, 0x01, 0x00, 0x06,
        0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00,
        0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43,
        0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69,
        0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
        0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0a,
        0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
        0x6c, 0x65, 0x01, 0x00, 0x06, 0x48, 0x2e, 0x6a,
        0x61, 0x76, 0x61, 0x0c, 0x00, 0x04, 0x00, 0x05,
        0x01, 0x00, 0x01, 0x48, 0x01, 0x00, 0x02, 0x5b,
        0x41, 0x00, 0x21, 0x00, 0x02, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x06, 0x00,
        0x00, 0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00,
        0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x09
    };

    /* public class I implements [B */
    private static int[] iClassBytes = {
        0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x2e,
        0x00, 0x0f, 0x0a, 0x00, 0x03, 0x00, 0x0b, 0x07,
        0x00, 0x0c, 0x07, 0x00, 0x0d, 0x07, 0x00, 0x0e,
        0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74,
        0x3e, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01,
        0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x01, 0x00,
        0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
        0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
        0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
        0x65, 0x46, 0x69, 0x6c, 0x65, 0x01, 0x00, 0x06,
        0x49, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x0c, 0x00,
        0x05, 0x00, 0x06, 0x01, 0x00, 0x01, 0x49, 0x01,
        0x00, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
        0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65,
        0x63, 0x74, 0x01, 0x00, 0x02, 0x5b, 0x42, 0x00,
        0x21, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00,
        0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
        0x05, 0x00, 0x06, 0x00, 0x01, 0x00, 0x07, 0x00,
        0x00, 0x00, 0x1d, 0x00, 0x01, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00,
        0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02,
        0x00, 0x0a
    };

    /**
     * Locally run through the test cases.
     */
    public static void main(String argv[]) {
        /* Use an instance of myself for testing */
        Inheritance tstInstance = new Inheritance();
        Class tstClass;

        try {
            tstClass = tstInstance.loadClass("D", true);
            /* Sun should catch without this!!!!! */
            Object o = tstClass.newInstance();
            throw new Error("Class extends IF not caught");
        } catch (ClassNotFoundException ex) {
            throw new Error("Unexpected ClassNotFoundException" + ex);
        } catch (IncompatibleClassChangeError ex) {
            /* This is what is expected */
        } catch (Exception ex) {
            throw new Error("Unexpected Exception" + ex);
        }

        try {
            tstClass = tstInstance.loadClass("E", true);
            throw new Error("Class implements class not caught");
        } catch (ClassNotFoundException ex) {
            throw new Error("Unexpected ClassNotFoundException" + ex);
        } catch (IncompatibleClassChangeError ex) {
            /* This is what is expected */
        } catch (Exception ex) {
            throw new Error("Unexpected Exception" + ex);
        }

        try {
            tstClass = tstInstance.loadClass("F", true);
            throw new Error("Class extends final class not caught");
        } catch (ClassNotFoundException ex) {
            throw new Error("Unexpected ClassNotFoundException" + ex);
        } catch (VerifyError ex) {
            /* This is what is expected */
        } catch (Exception ex) {
            throw new Error("Unexpected Exception" + ex);
        }

        try {
            tstClass = tstInstance.loadClass("G", true);
            throw new Error("Interface extends class not caught");
        } catch (ClassNotFoundException ex) {
            throw new Error("Unexpected ClassNotFoundException" + ex);
        } catch (IncompatibleClassChangeError ex) {
            /* This is what is expected */
        } catch (Exception ex) {
            throw new Error("Unexpected Exception" + ex);
        }

        try {
            tstClass = tstInstance.loadClass("H", true);
            throw new Error("Class extends array not caught");
        } catch (ClassNotFoundException ex) {
            throw new Error("Unexpected ClassNotFoundException" + ex);
        } catch (ClassFormatError ex) {
            /* This is what is expected */
        } catch (Exception ex) {
            throw new Error("Unexpected Exception" + ex);
        }

        try {
            tstClass = tstInstance.loadClass("I", true);
            throw new Error("Class implements array not caught");
        } catch (ClassNotFoundException ex) {
            throw new Error("Unexpected ClassNotFoundException" + ex);
        } catch (ClassFormatError ex) {
            /* This is what is expected */
        } catch (Exception ex) {
            throw new Error("Unexpected Exception" + ex);
        }
    }

    /**
     * Local method to wrap class definition with integer byte arrays.
     */
    public Class localDefineClass(String className, int[] byteData) {
        byte[] dataSet = new byte[2048];

        for (int i = 0; i < byteData.length; i++) {
            dataSet[i] = (byte) byteData[i];
        }
        return defineClass(className, dataSet, 0, byteData.length);
    }

    /**
     * Method to provide support for JDK1.1 compilers.
     */
    public Class loadClass(String className, boolean resolve)
            throws ClassNotFoundException {
        if (className.equals("A")) {
            return localDefineClass("A", aClassBytes);
        } else if (className.equals("B")) {
            return localDefineClass("B", bClassBytes);
        } else if (className.equals("C")) {
            return localDefineClass("C", cClassBytes);
        } else if (className.equals("D")) {
            return localDefineClass("D", dClassBytes);
        } else if (className.equals("E")) {
            return localDefineClass("E", eClassBytes);
        } else if (className.equals("F")) {
            return localDefineClass("F", fClassBytes);
        } else if (className.equals("G")) {
            return localDefineClass("G", gClassBytes);
        } else if (className.equals("H")) {
            return localDefineClass("H", hClassBytes);
        } else if (className.equals("I")) {
            return localDefineClass("I", iClassBytes);
        } else {
            return Class.forName(className);
        }
    }
}
